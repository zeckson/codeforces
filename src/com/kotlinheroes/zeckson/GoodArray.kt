package com.kotlinheroes.zeckson

import java.util.*
import kotlin.collections.ArrayList
/*
E. –•–æ—Ä–æ—à–∏–π –º–∞—Å—Å–∏–≤
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç2.0 —Å
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç512 –ú–ë
–≤–≤–æ–¥—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥
–≤—ã–≤–æ–¥—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥
–ù–∞–∑–æ–≤–µ–º –º–∞—Å—Å–∏–≤ —Ö–æ—Ä–æ—à–∏–º, –µ—Å–ª–∏ –≤ –Ω–µ–º –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç, —Ä–∞–≤–Ω—ã–π —Å—É–º–º–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä, –º–∞—Å—Å–∏–≤ ùëé=[1,3,3,7] ‚Äî —Ö–æ—Ä–æ—à–∏–π, —Ç–∞–∫ –∫–∞–∫ ùëé4=7 —Ä–∞–≤–Ω–æ 1+3+3.

–í–∞–º –¥–∞–Ω –º–∞—Å—Å–∏–≤ ùëé –∏–∑ ùëõ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ ‚Äî –Ω–∞–π—Ç–∏ –≤—Å–µ —Ç–∞–∫–∏–µ –∏–Ω–¥–µ–∫—Å—ã ùëó —ç—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞, —á—Ç–æ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è ùëó-–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤ —Å—Ç–∞–Ω–µ—Ç —Ö–æ—Ä–æ—à–∏–º (–Ω–∞–∑–æ–≤–µ–º —Ç–∞–∫–∏–µ –∏–Ω–¥–µ–∫—Å—ã –∫—Ä–∞—Å–∏–≤—ã–º–∏).

–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ ùëé=[8,3,5,2], –∫—Ä–∞—Å–∏–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã ‚Äî 1 –∏ 4:

–ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ùëé1 –º–∞—Å—Å–∏–≤ —Å—Ç–∞–Ω–µ—Ç [3,5,2], –∏ —ç—Ç–æ—Ç –º–∞—Å—Å–∏–≤ —Ö–æ—Ä–æ—à–∏–π;
–ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ùëé4 –º–∞—Å—Å–∏–≤ —Å—Ç–∞–Ω–µ—Ç [8,3,5], –∏ —ç—Ç–æ—Ç –º–∞—Å—Å–∏–≤ —Ö–æ—Ä–æ—à–∏–π.
–í—Å–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–¥–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ, —Ç–æ –µ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –º–∞—Å—Å–∏–≤ —Ç–µ–ø–µ—Ä—å —Ö–æ—Ä–æ—à–∏–π, –∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—Å—Ç–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –æ–±—Ä–∞—Ç–Ω–æ.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–ø–∏—Å–∞–Ω–æ –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ùëõ (2‚â§ùëõ‚â§2‚ãÖ105) ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ ùëé.

–í–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–ø–∏—Å–∞–Ω—ã ùëõ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª ùëé1,ùëé2,‚Ä¶,ùëéùëõ (1‚â§ùëéùëñ‚â§106) ‚Äî —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ ùëé.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤—ã–≤–µ–¥–∏—Ç–µ ùëò ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–∫–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ ùëó –º–∞—Å—Å–∏–≤–∞ ùëé, —á—Ç–æ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è ùëó-–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤ —Å—Ç–∞–Ω–µ—Ç —Ö–æ—Ä–æ—à–∏–º (—Ç–æ –µ—Å—Ç—å, –≤—ã–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∞—Å–∏–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤).

–í–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ –≤—ã–≤–µ–¥–∏—Ç–µ ùëò —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª ùëó1,ùëó2,‚Ä¶,ùëóùëò –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ ‚Äî –∫—Ä–∞—Å–∏–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã ùëé.

–ï—Å–ª–∏ —Ç–∞–∫–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–µ—Ç –≤ –º–∞—Å—Å–∏–≤–µ ùëé, –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤—ã–≤–µ–¥–∏—Ç–µ 0, –∞ –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–æ–∫—É –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –≤—ã–≤–æ–¥–∏—Ç–µ –≤–æ–æ–±—â–µ.

–ü—Ä–∏–º–µ—Ä—ã
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
5
2 5 1 2 2
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
3
4 1 5
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
4
8 3 5 2
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
2
1 4
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
5
2 1 2 4 3
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
0

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
–í –ø–µ—Ä–≤–æ–º –ø—Ä–∏–º–µ—Ä–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ª—é–±–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 2, –∏ –º–∞—Å—Å–∏–≤ —Å—Ç–∞–Ω–µ—Ç [5,1,2,2]. –°—É–º–º–∞ –º–∞—Å—Å–∏–≤–∞ —Ä–∞–≤–Ω–∞ 10, –∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç, —Ä–∞–≤–Ω—ã–π —Å—É–º–º–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö (5=1+2+2).

–í–æ –≤—Ç–æ—Ä–æ–º –ø—Ä–∏–º–µ—Ä–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å 8, –∏ –º–∞—Å—Å–∏–≤ —Å—Ç–∞–Ω–µ—Ç [3,5,2]. –°—É–º–º–∞ —Ä–∞–≤–Ω–∞ 10, –∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç, —Ä–∞–≤–Ω—ã–π —Å—É–º–º–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (5=3+2). –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å 2, –∏ –º–∞—Å—Å–∏–≤ —Å—Ç–∞–Ω–µ—Ç [8,3,5]. –°—É–º–º–∞ —Ä–∞–≤–Ω–∞ 16, –∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç, —Ä–∞–≤–Ω—ã–π —Å—É–º–º–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö (8=3+5).

–í —Ç—Ä–µ—Ç—å–µ–º –ø—Ä–∏–º–µ—Ä–µ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–µ–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–¥–µ–ª–∞—Ç—å –º–∞—Å—Å–∏–≤ —Ö–æ—Ä–æ—à–∏–º.

 */
const val MAX_NUMBER = 1_000_002
val NUMBERS = Array(MAX_NUMBER) { 0 }

fun isGood(arr: Array<Int>, sum: Int, exclude: Int): Boolean {
    if (sum % 2 != 0) return false
    val pivot = sum / 2
    val found = NUMBERS[pivot]
    return (found != 0) and (found != exclude + 1)
}


fun main() {
    val scanner = Scanner(System.`in`)
    val length = scanner.nextInt()

    var sum = 0
    var idx = 1
    val array = Array<Int>(length) {
        val nextInt = scanner.nextInt()
        sum += nextInt
        NUMBERS[nextInt] = idx++
        nextInt
    }

    val beautifulList = ArrayList<Int>()
    for (i in array.indices) {
        val it = array[i]
        val good = isGood(array, sum - it, i)

        if (good) {
            beautifulList.add(i + 1)
        }
    }
    println(beautifulList.size)
    println(beautifulList.joinToString(" "))
}
